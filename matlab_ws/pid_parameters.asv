% 1) Cria nó e subscreve
node     = ros2node("/pid_control_node");
subDisp  = ros2subscriber(node, "/displacements",    "std_msgs/Float32MultiArray");
subState = ros2subscriber(node, "/joint_states",     "sensor_msgs/JointState");
pubTraj  = ros2publisher(node, "/ur5e_controller/joint_trajectory",  "trajectory_msgs/JointTrajectory");

% 2) Carrega modelo para Jacobiana
ur5e = loadrobot('universalUR5e','DataFormat','column');

% Intervalos para grid-search
Kp_vals = 2:0.5:8;
Ki_vals = 0.01:0.01:0.1;
dx_vals = 15:2:35;

% Parâmetros fixos
Kd        = 0.01 .* [1,1,1];
dz_factor = 2;
dt        = 0.05;    % 20 Hz
threshold = 1e-4;
tol       = 0.5e-4;

% ... o teu setup até aqui permanece igual ...

best_time = -Inf;
best_cfg  = struct();
max_test  = 20;   % queremos manter o padrão 6s

csv_file = 'results.csv';
fid = fopen(csv_file,'w');
fprintf(fid, 'Kp,Ki,dx_f,time_recognized\n');
fclose(fid);


for Kp_v = 2:0.5:6
  for Ki_v = 0.01:0.01:0.1
    for dx_f = 15:2:35

      fprintf('\n--- Teste: Kp=%.2f Ki=%.2f dx_f=%.1f ---\n', Kp_v, Ki_v, dx_f);

      system('ros2 service call /reset_simulation std_srvs/srv/Trigger > /dev/null');
      pause(0.5);

      start_clock = tic;
      t_last_msg = 0;

      try
        dmsg0 = receive(subDisp, 1.0);   % espera até 1s por uma mensagem inicial
        t_last_msg = toc(start_clock);
      catch
        % se não vier nada, ignora. Mas normalmente virá.
      end

      % ajusta ganhos
      Kp = Kp_v .* [1,1,1];
      Ki = Ki_v .* [1,1,1];
      Kd = 0.01 .* [1,1,1];  

      % zera PID
      int_x = 0; prev_x = 0;
      int_y = 0; prev_y = 0;
      int_z = 0; prev_z = 0;

      % estado inicial
      msgJS = receive(subState,1.0);
      q     = double(msgJS.position(:));
      T0    = getTransform(ur5e,q,"tool0");
      ref   = T0(1:3,4);

      while toc(tstart) < max_test
          try
            dmsg = receive(subDisp,dt);
            t_last_msg = toc(start_clock);
          catch
          end

          if t_last_msg > 0

            dx = dx_f * double(dmsg.data(1));
            dz = 2    * double(dmsg.data(2));
    
            T     = getTransform(ur5e,q,"tool0");
            err_x = ref(1)-T(1,4)+dz;
            err_y = ref(2)-T(2,4)+dx;
            err_z = ref(3)-T(3,4);
            % (retira o critério err < tol aqui, para não sair logo)
    
            % PID com derivativo
            int_x = int_x + err_x*dt;  der_x = (err_x - prev_x)/dt;  prev_x = err_x;
            int_y = int_y + err_y*dt;  der_y = (err_y - prev_y)/dt;  prev_y = err_y;
            int_z = int_z + err_z*dt;  der_z = (err_z - prev_z)/dt;  prev_z = err_z;
            vx    = Kp(1)*err_x + Ki(1)*int_x + Kd(1)*der_x;
            vy    = Kp(2)*err_y + Ki(2)*int_y + Kd(2)*der_y;
            vz    = Kp(3)*err_z + Ki(3)*int_z + Kd(3)*der_z;
    
            J  = geometricJacobian(ur5e, q, 'tool0');
            if abs(det(J)) < threshold, break; end
            dq = pinv(J)*[0;0;0;vx;vy;vz];
            q  = q + dq*dt;
    
            % publica traj
            trajMsg = ros2message("trajectory_msgs/JointTrajectory");
            trajMsg.joint_names = {'shoulder_pan_joint','shoulder_lift_joint','elbow_joint', ...
                                   'wrist_1_joint','wrist_2_joint','wrist_3_joint'};
            pt = ros2message("trajectory_msgs/JointTrajectoryPoint");
            pt.positions = q;
            pt.time_from_start.sec = int32(0);
            pt.time_from_start.nanosec = uint32(0);
            trajMsg.points = pt;
            send(pubTraj, trajMsg);
    
            pause(dt);
          end
      end

     % 6) No fim, t_last_msg é o tempo de reconhecimento
      fprintf('→ padrão reconhecido durante %.2f s (de %.2f s)\n', t_last_msg, max_test);
                
      fid = fopen(csv_file,'a');
      fprintf(fid, '%.2f,%.2f,%.1f,%.2f\n', Kp_v, Ki_v, dx_f, t_last_msg);
      fclose(fid);

      % Atualiza merlhor
      if t_last_msg > best_time
        best_time = t_last_msg;
        best_cfg  = struct('Kp',Kp_v,'Ki',Ki_v,'dx_f',dx_f,'time',t_last_msg);
      end

    end
  end
end

fprintf('\n*** Melhor config ***\n Kp=%.2f  Ki=%.2f  dx_f=%.1f  time=%.2f s\n', ...
        best_cfg.Kp, best_cfg.Ki, best_cfg.dx_f, best_cfg.time);

fprintf('Todos os resultados gravados em %s\n', csv_file);

